pipeline {
    agent any

    environment {
        TOMCAT_SERVER = '10.0.11.178'
        PROXY_SERVER  = '10.0.40.132'
        SSH_CRED_ID   = 'Devops_MJ_cred'
        TOMCAT_PATH   = '/opt/tomcat/webapps'
        TOMCAT_SVC    = 'tomcat10'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Amogh902/DevOps_MJ_code.git'
            }
        }

        stage('Build WAR') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sshagent([SSH_CRED_ID]) {
                    sh """
                        WAR_FILE=\$(ls target/*.war | head -n1)
                        echo "WAR built: \$WAR_FILE"

                        scp -o StrictHostKeyChecking=no \$WAR_FILE ec2-user@${TOMCAT_SERVER}:/tmp/ROOT.war

                        ssh -o StrictHostKeyChecking=no ec2-user@${TOMCAT_SERVER} << 'EOF'
                            sudo systemctl stop ${TOMCAT_SVC} || true
                            sudo rm -rf ${TOMCAT_PATH}/ROOT ${TOMCAT_PATH}/ROOT.war
                            sudo mv /tmp/ROOT.war ${TOMCAT_PATH}/ROOT.war
                            sudo chown -R tomcat:tomcat ${TOMCAT_PATH}
                            sudo chmod -R 755 ${TOMCAT_PATH}
                            sudo systemctl start ${TOMCAT_SVC}

                            # Wait until ROOT is unpacked
                            TIMEOUT=60
                            while [ ! -d "${TOMCAT_PATH}/ROOT" ] && [ \$TIMEOUT -gt 0 ]; do
                                sleep 5
                                TIMEOUT=\$((TIMEOUT-5))
                            done

                            if [ ! -d "${TOMCAT_PATH}/ROOT" ]; then
                                echo "ERROR: ROOT app did not unpack correctly!"
                                exit 1
                            fi
EOF
                    """
                }
            }
        }

        stage('Verify via Proxy') {
            steps {
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" http://${PROXY_SERVER}/", returnStdout: true).trim()
                    if (response != '200') {
                        error "App not reachable via proxy! HTTP code: ${response}"
                    } else {
                        echo "✅ App reachable via proxy!"
                    }
                }
            }
        }
    }

    post {
        success { echo "✅ Deployment successful! Access the app via: http://${PROXY_SERVER}/" }
        failure { echo "❌ Deployment failed. Check Jenkins logs." }
    }
}
