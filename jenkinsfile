pipeline {
    agent any

    environment {
        WAR_FILE = "target/student.war"
        REMOTE_USER = "ec2-user"
        REMOTE_HOST = "10.0.11.178"
        TOMCAT_PATH = "/opt/tomcat/webapps"
        SSH_CREDENTIALS = "Credentials_for_ssh_app_server"
        APP_URL = "http://${REMOTE_HOST}:8080/"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build WAR') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sshagent([env.SSH_CREDENTIALS]) {
                    sh """
                        scp -o StrictHostKeyChecking=no ${WAR_FILE} ${REMOTE_USER}@${REMOTE_HOST}:/tmp/ROOT.war
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            sudo systemctl stop tomcat10 || true
                            sudo rm -rf ${TOMCAT_PATH}/ROOT ${TOMCAT_PATH}/ROOT.war
                            sudo mv /tmp/ROOT.war ${TOMCAT_PATH}/ROOT.war
                            sudo chown tomcat:tomcat ${TOMCAT_PATH}/ROOT.war
                            sudo chmod 644 ${TOMCAT_PATH}/ROOT.war
                            sudo systemctl start tomcat10
                        '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def timeout = 120
                    def deployed = false

                    while (timeout > 0) {
                        def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${APP_URL}", returnStdout: true).trim()
                        if (status == '200') {
                            deployed = true
                            echo "Deployment successful!"
                            break
                        }
                        sleep 5
                        timeout -= 5
                    }

                    if (!deployed) {
                        error "Deployment verification failed or timed out!"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully."
        }
        failure {
            echo "❌ Deployment failed. Check Jenkins logs."
        }
    }
}
